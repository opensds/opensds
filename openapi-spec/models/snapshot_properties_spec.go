// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPropertiesSpec SnapshotPropertiesSpec represents some suggested properties for performing snapshot policies.
// swagger:model SnapshotPropertiesSpec
type SnapshotPropertiesSpec struct {

	// retention
	Retention *SnapshotPropertiesSpecRetention `json:"retention,omitempty"`

	// schedule
	Schedule *SnapshotPropertiesSpecSchedule `json:"schedule,omitempty"`

	// topology
	Topology *SnapshotPropertiesSpecTopology `json:"topology,omitempty"`
}

// Validate validates this snapshot properties spec
func (m *SnapshotPropertiesSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPropertiesSpec) validateRetention(formats strfmt.Registry) error {

	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPropertiesSpec) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPropertiesSpec) validateTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.Topology) { // not required
		return nil
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPropertiesSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPropertiesSpec) UnmarshalBinary(b []byte) error {
	var res SnapshotPropertiesSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPropertiesSpecRetention snapshot properties spec retention
// swagger:model SnapshotPropertiesSpecRetention
type SnapshotPropertiesSpecRetention struct {

	// duration
	Duration int64 `json:"duration,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`
}

// Validate validates this snapshot properties spec retention
func (m *SnapshotPropertiesSpecRetention) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPropertiesSpecRetention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPropertiesSpecRetention) UnmarshalBinary(b []byte) error {
	var res SnapshotPropertiesSpecRetention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPropertiesSpecSchedule snapshot properties spec schedule
// swagger:model SnapshotPropertiesSpecSchedule
type SnapshotPropertiesSpecSchedule struct {

	// datetime
	// Format: date-time
	Datetime strfmt.DateTime `json:"datetime,omitempty"`

	// occurrence
	// Enum: [Daily Weekly Monthly]
	Occurrence string `json:"occurrence,omitempty"`
}

// Validate validates this snapshot properties spec schedule
func (m *SnapshotPropertiesSpecSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPropertiesSpecSchedule) validateDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Datetime) { // not required
		return nil
	}

	if err := validate.FormatOf("schedule"+"."+"datetime", "body", "date-time", m.Datetime.String(), formats); err != nil {
		return err
	}

	return nil
}

var snapshotPropertiesSpecScheduleTypeOccurrencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily","Weekly","Monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotPropertiesSpecScheduleTypeOccurrencePropEnum = append(snapshotPropertiesSpecScheduleTypeOccurrencePropEnum, v)
	}
}

const (

	// SnapshotPropertiesSpecScheduleOccurrenceDaily captures enum value "Daily"
	SnapshotPropertiesSpecScheduleOccurrenceDaily string = "Daily"

	// SnapshotPropertiesSpecScheduleOccurrenceWeekly captures enum value "Weekly"
	SnapshotPropertiesSpecScheduleOccurrenceWeekly string = "Weekly"

	// SnapshotPropertiesSpecScheduleOccurrenceMonthly captures enum value "Monthly"
	SnapshotPropertiesSpecScheduleOccurrenceMonthly string = "Monthly"
)

// prop value enum
func (m *SnapshotPropertiesSpecSchedule) validateOccurrenceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snapshotPropertiesSpecScheduleTypeOccurrencePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotPropertiesSpecSchedule) validateOccurrence(formats strfmt.Registry) error {

	if swag.IsZero(m.Occurrence) { // not required
		return nil
	}

	// value enum
	if err := m.validateOccurrenceEnum("schedule"+"."+"occurrence", "body", m.Occurrence); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPropertiesSpecSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPropertiesSpecSchedule) UnmarshalBinary(b []byte) error {
	var res SnapshotPropertiesSpecSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPropertiesSpecTopology snapshot properties spec topology
// swagger:model SnapshotPropertiesSpecTopology
type SnapshotPropertiesSpecTopology struct {

	// bucket
	Bucket string `json:"bucket,omitempty"`
}

// Validate validates this snapshot properties spec topology
func (m *SnapshotPropertiesSpecTopology) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPropertiesSpecTopology) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPropertiesSpecTopology) UnmarshalBinary(b []byte) error {
	var res SnapshotPropertiesSpecTopology
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
