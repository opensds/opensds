// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DockSpec A backend is initialized by specific driver configuration. Each backend can be regarded as a docking service between SDS controller and storage service.
// swagger:model DockSpec
type DockSpec struct {
	BaseModel

	// description
	Description string `json:"description,omitempty"`

	// driver name
	// Required: true
	// Enum: [default lvm ceph cinder huawei_dorado huawei_fusionstorage]
	DriverName *string `json:"driverName"`

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// node Id
	// Required: true
	NodeID *string `json:"nodeId"`

	// status
	// Required: true
	// Enum: [available unavailable]
	Status *string `json:"status"`

	// storage type
	// Enum: [block file object]
	StorageType string `json:"storageType,omitempty"`

	// type
	// Enum: [provisioner attacher]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DockSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"description,omitempty"`

		DriverName *string `json:"driverName"`

		Endpoint *string `json:"endpoint"`

		Metadata interface{} `json:"metadata,omitempty"`

		Name *string `json:"name"`

		NodeID *string `json:"nodeId"`

		Status *string `json:"status"`

		StorageType string `json:"storageType,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.DriverName = dataAO1.DriverName

	m.Endpoint = dataAO1.Endpoint

	m.Metadata = dataAO1.Metadata

	m.Name = dataAO1.Name

	m.NodeID = dataAO1.NodeID

	m.Status = dataAO1.Status

	m.StorageType = dataAO1.StorageType

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DockSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Description string `json:"description,omitempty"`

		DriverName *string `json:"driverName"`

		Endpoint *string `json:"endpoint"`

		Metadata interface{} `json:"metadata,omitempty"`

		Name *string `json:"name"`

		NodeID *string `json:"nodeId"`

		Status *string `json:"status"`

		StorageType string `json:"storageType,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.DriverName = m.DriverName

	dataAO1.Endpoint = m.Endpoint

	dataAO1.Metadata = m.Metadata

	dataAO1.Name = m.Name

	dataAO1.NodeID = m.NodeID

	dataAO1.Status = m.Status

	dataAO1.StorageType = m.StorageType

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this dock spec
func (m *DockSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dockSpecTypeDriverNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","lvm","ceph","cinder","huawei_dorado","huawei_fusionstorage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockSpecTypeDriverNamePropEnum = append(dockSpecTypeDriverNamePropEnum, v)
	}
}

// property enum
func (m *DockSpec) validateDriverNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dockSpecTypeDriverNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DockSpec) validateDriverName(formats strfmt.Registry) error {

	if err := validate.Required("driverName", "body", m.DriverName); err != nil {
		return err
	}

	// value enum
	if err := m.validateDriverNameEnum("driverName", "body", *m.DriverName); err != nil {
		return err
	}

	return nil
}

func (m *DockSpec) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *DockSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DockSpec) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

var dockSpecTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","unavailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockSpecTypeStatusPropEnum = append(dockSpecTypeStatusPropEnum, v)
	}
}

// property enum
func (m *DockSpec) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dockSpecTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DockSpec) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var dockSpecTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","file","object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockSpecTypeStorageTypePropEnum = append(dockSpecTypeStorageTypePropEnum, v)
	}
}

// property enum
func (m *DockSpec) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dockSpecTypeStorageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DockSpec) validateStorageType(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTypeEnum("storageType", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

var dockSpecTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["provisioner","attacher"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockSpecTypeTypePropEnum = append(dockSpecTypeTypePropEnum, v)
	}
}

// property enum
func (m *DockSpec) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dockSpecTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DockSpec) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DockSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DockSpec) UnmarshalBinary(b []byte) error {
	var res DockSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
