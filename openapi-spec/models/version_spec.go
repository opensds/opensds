// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionSpec Lists information for all SDS controller API versions. An API version is a  string that consists of a 'v' + number, or 'v' + number + 'alpha'  or 'beta' + number.
// swagger:model VersionSpec
type VersionSpec struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Required: true
	// Enum: [CURRENT SUPPORTED DEPRECATED]
	Status *string `json:"status"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated"`
}

// Validate validates this version spec
func (m *VersionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var versionSpecTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CURRENT","SUPPORTED","DEPRECATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionSpecTypeStatusPropEnum = append(versionSpecTypeStatusPropEnum, v)
	}
}

const (

	// VersionSpecStatusCURRENT captures enum value "CURRENT"
	VersionSpecStatusCURRENT string = "CURRENT"

	// VersionSpecStatusSUPPORTED captures enum value "SUPPORTED"
	VersionSpecStatusSUPPORTED string = "SUPPORTED"

	// VersionSpecStatusDEPRECATED captures enum value "DEPRECATED"
	VersionSpecStatusDEPRECATED string = "DEPRECATED"
)

// prop value enum
func (m *VersionSpec) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, versionSpecTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VersionSpec) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VersionSpec) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionSpec) UnmarshalBinary(b []byte) error {
	var res VersionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
