// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeAttachmentSpec Attachment is a description of volume attached resource.
// swagger:model VolumeAttachmentSpec
type VolumeAttachmentSpec struct {
	BaseModel

	// connection info
	// Required: true
	ConnectionInfo *ConnectionInfo `json:"connectionInfo"`

	// host info
	// Required: true
	HostInfo *HostInfo `json:"hostInfo"`

	// mountpoint
	// Required: true
	Mountpoint *string `json:"mountpoint"`

	// project Id
	// Required: true
	// Read Only: true
	ProjectID string `json:"projectId"`

	// status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// user Id
	// Read Only: true
	UserID string `json:"userId,omitempty"`

	// volume Id
	// Required: true
	VolumeID *string `json:"volumeId"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VolumeAttachmentSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		ConnectionInfo *ConnectionInfo `json:"connectionInfo"`

		HostInfo *HostInfo `json:"hostInfo"`

		Mountpoint *string `json:"mountpoint"`

		ProjectID string `json:"projectId"`

		Status string `json:"status"`

		UserID string `json:"userId,omitempty"`

		VolumeID *string `json:"volumeId"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConnectionInfo = dataAO1.ConnectionInfo

	m.HostInfo = dataAO1.HostInfo

	m.Mountpoint = dataAO1.Mountpoint

	m.ProjectID = dataAO1.ProjectID

	m.Status = dataAO1.Status

	m.UserID = dataAO1.UserID

	m.VolumeID = dataAO1.VolumeID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VolumeAttachmentSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ConnectionInfo *ConnectionInfo `json:"connectionInfo"`

		HostInfo *HostInfo `json:"hostInfo"`

		Mountpoint *string `json:"mountpoint"`

		ProjectID string `json:"projectId"`

		Status string `json:"status"`

		UserID string `json:"userId,omitempty"`

		VolumeID *string `json:"volumeId"`
	}

	dataAO1.ConnectionInfo = m.ConnectionInfo

	dataAO1.HostInfo = m.HostInfo

	dataAO1.Mountpoint = m.Mountpoint

	dataAO1.ProjectID = m.ProjectID

	dataAO1.Status = m.Status

	dataAO1.UserID = m.UserID

	dataAO1.VolumeID = m.VolumeID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this volume attachment spec
func (m *VolumeAttachmentSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeAttachmentSpec) validateConnectionInfo(formats strfmt.Registry) error {

	if err := validate.Required("connectionInfo", "body", m.ConnectionInfo); err != nil {
		return err
	}

	if m.ConnectionInfo != nil {
		if err := m.ConnectionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeAttachmentSpec) validateHostInfo(formats strfmt.Registry) error {

	if err := validate.Required("hostInfo", "body", m.HostInfo); err != nil {
		return err
	}

	if m.HostInfo != nil {
		if err := m.HostInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeAttachmentSpec) validateMountpoint(formats strfmt.Registry) error {

	if err := validate.Required("mountpoint", "body", m.Mountpoint); err != nil {
		return err
	}

	return nil
}

func (m *VolumeAttachmentSpec) validateProjectID(formats strfmt.Registry) error {

	if err := validate.RequiredString("projectId", "body", string(m.ProjectID)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeAttachmentSpec) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeAttachmentSpec) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("volumeId", "body", m.VolumeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeAttachmentSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeAttachmentSpec) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
