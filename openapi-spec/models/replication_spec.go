// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationSpec Replication represents a replication relationship between the volumes on the primary and secondary sites.
// swagger:model ReplicationSpec
type ReplicationSpec struct {
	BaseModel

	// availability zone
	// Required: true
	AvailabilityZone *string `json:"availabilityZone"`

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// primary replication driver data
	PrimaryReplicationDriverData map[string]string `json:"primaryReplicationDriverData,omitempty"`

	// primary volume Id
	// Required: true
	PrimaryVolumeID *string `json:"primaryVolumeId"`

	// profile Id
	// Required: true
	ProfileID *string `json:"profileId"`

	// project Id
	// Required: true
	// Read Only: true
	ProjectID string `json:"projectId"`

	// replication mode
	// Required: true
	// Enum: [sync async]
	ReplicationMode *string `json:"replicationMode"`

	// replication period
	// Required: true
	// Minimum: 0
	ReplicationPeriod *int64 `json:"replicationPeriod"`

	// replication status
	// Read Only: true
	// Enum: [available creating deleting enabling disabling failing_over failing_back error error_deleting error_enabling error_disabling error_failover error_failback enabled disabled failed_over]
	ReplicationStatus string `json:"replicationStatus,omitempty"`

	// secondary replication driver data
	SecondaryReplicationDriverData map[string]string `json:"secondaryReplicationDriverData,omitempty"`

	// secondary volume Id
	SecondaryVolumeID string `json:"secondaryVolumeId,omitempty"`

	// user Id
	// Read Only: true
	UserID string `json:"userId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReplicationSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		Name *string `json:"name"`

		PrimaryReplicationDriverData map[string]string `json:"primaryReplicationDriverData,omitempty"`

		PrimaryVolumeID *string `json:"primaryVolumeId"`

		ProfileID *string `json:"profileId"`

		ProjectID string `json:"projectId"`

		ReplicationMode *string `json:"replicationMode"`

		ReplicationPeriod *int64 `json:"replicationPeriod"`

		ReplicationStatus string `json:"replicationStatus,omitempty"`

		SecondaryReplicationDriverData map[string]string `json:"secondaryReplicationDriverData,omitempty"`

		SecondaryVolumeID string `json:"secondaryVolumeId,omitempty"`

		UserID string `json:"userId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AvailabilityZone = dataAO1.AvailabilityZone

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.PrimaryReplicationDriverData = dataAO1.PrimaryReplicationDriverData

	m.PrimaryVolumeID = dataAO1.PrimaryVolumeID

	m.ProfileID = dataAO1.ProfileID

	m.ProjectID = dataAO1.ProjectID

	m.ReplicationMode = dataAO1.ReplicationMode

	m.ReplicationPeriod = dataAO1.ReplicationPeriod

	m.ReplicationStatus = dataAO1.ReplicationStatus

	m.SecondaryReplicationDriverData = dataAO1.SecondaryReplicationDriverData

	m.SecondaryVolumeID = dataAO1.SecondaryVolumeID

	m.UserID = dataAO1.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReplicationSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		Name *string `json:"name"`

		PrimaryReplicationDriverData map[string]string `json:"primaryReplicationDriverData,omitempty"`

		PrimaryVolumeID *string `json:"primaryVolumeId"`

		ProfileID *string `json:"profileId"`

		ProjectID string `json:"projectId"`

		ReplicationMode *string `json:"replicationMode"`

		ReplicationPeriod *int64 `json:"replicationPeriod"`

		ReplicationStatus string `json:"replicationStatus,omitempty"`

		SecondaryReplicationDriverData map[string]string `json:"secondaryReplicationDriverData,omitempty"`

		SecondaryVolumeID string `json:"secondaryVolumeId,omitempty"`

		UserID string `json:"userId,omitempty"`
	}

	dataAO1.AvailabilityZone = m.AvailabilityZone

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.PrimaryReplicationDriverData = m.PrimaryReplicationDriverData

	dataAO1.PrimaryVolumeID = m.PrimaryVolumeID

	dataAO1.ProfileID = m.ProfileID

	dataAO1.ProjectID = m.ProjectID

	dataAO1.ReplicationMode = m.ReplicationMode

	dataAO1.ReplicationPeriod = m.ReplicationPeriod

	dataAO1.ReplicationStatus = m.ReplicationStatus

	dataAO1.SecondaryReplicationDriverData = m.SecondaryReplicationDriverData

	dataAO1.SecondaryVolumeID = m.SecondaryVolumeID

	dataAO1.UserID = m.UserID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this replication spec
func (m *ReplicationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationSpec) validateAvailabilityZone(formats strfmt.Registry) error {

	if err := validate.Required("availabilityZone", "body", m.AvailabilityZone); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationSpec) validatePrimaryVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("primaryVolumeId", "body", m.PrimaryVolumeID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationSpec) validateProfileID(formats strfmt.Registry) error {

	if err := validate.Required("profileId", "body", m.ProfileID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationSpec) validateProjectID(formats strfmt.Registry) error {

	if err := validate.RequiredString("projectId", "body", string(m.ProjectID)); err != nil {
		return err
	}

	return nil
}

var replicationSpecTypeReplicationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sync","async"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationSpecTypeReplicationModePropEnum = append(replicationSpecTypeReplicationModePropEnum, v)
	}
}

// property enum
func (m *ReplicationSpec) validateReplicationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replicationSpecTypeReplicationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationSpec) validateReplicationMode(formats strfmt.Registry) error {

	if err := validate.Required("replicationMode", "body", m.ReplicationMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateReplicationModeEnum("replicationMode", "body", *m.ReplicationMode); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationSpec) validateReplicationPeriod(formats strfmt.Registry) error {

	if err := validate.Required("replicationPeriod", "body", m.ReplicationPeriod); err != nil {
		return err
	}

	if err := validate.MinimumInt("replicationPeriod", "body", int64(*m.ReplicationPeriod), 0, false); err != nil {
		return err
	}

	return nil
}

var replicationSpecTypeReplicationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","creating","deleting","enabling","disabling","failing_over","failing_back","error","error_deleting","error_enabling","error_disabling","error_failover","error_failback","enabled","disabled","failed_over"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationSpecTypeReplicationStatusPropEnum = append(replicationSpecTypeReplicationStatusPropEnum, v)
	}
}

// property enum
func (m *ReplicationSpec) validateReplicationStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replicationSpecTypeReplicationStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationSpec) validateReplicationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationStatusEnum("replicationStatus", "body", m.ReplicationStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationSpec) UnmarshalBinary(b []byte) error {
	var res ReplicationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
