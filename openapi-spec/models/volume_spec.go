// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeSpec Volume is an block device created by storage service, it can be attached to physical machine or virtual machine instance.
// swagger:model VolumeSpec
type VolumeSpec struct {
	BaseModel

	// availability zone
	// Required: true
	AvailabilityZone *string `json:"availabilityZone"`

	// description
	Description string `json:"description,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pool Id
	// Required: true
	PoolID *string `json:"poolId"`

	// profile Id
	// Required: true
	ProfileID *string `json:"profileId"`

	// project Id
	// Required: true
	// Read Only: true
	ProjectID string `json:"projectId"`

	// replication driver data
	ReplicationDriverData map[string]string `json:"replicationDriverData,omitempty"`

	// replication Id
	ReplicationID string `json:"replicationId,omitempty"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// snapshot from cloud
	SnapshotFromCloud bool `json:"snapshotFromCloud,omitempty"`

	// snapshot Id
	SnapshotID string `json:"snapshotId,omitempty"`

	// status
	// Read Only: true
	Status string `json:"status,omitempty"`

	// user Id
	// Read Only: true
	UserID string `json:"userId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VolumeSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		GroupID string `json:"groupId,omitempty"`

		Metadata map[string]string `json:"metadata,omitempty"`

		Name *string `json:"name"`

		PoolID *string `json:"poolId"`

		ProfileID *string `json:"profileId"`

		ProjectID string `json:"projectId"`

		ReplicationDriverData map[string]string `json:"replicationDriverData,omitempty"`

		ReplicationID string `json:"replicationId,omitempty"`

		Size *int64 `json:"size"`

		SnapshotFromCloud bool `json:"snapshotFromCloud,omitempty"`

		SnapshotID string `json:"snapshotId,omitempty"`

		Status string `json:"status,omitempty"`

		UserID string `json:"userId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AvailabilityZone = dataAO1.AvailabilityZone

	m.Description = dataAO1.Description

	m.GroupID = dataAO1.GroupID

	m.Metadata = dataAO1.Metadata

	m.Name = dataAO1.Name

	m.PoolID = dataAO1.PoolID

	m.ProfileID = dataAO1.ProfileID

	m.ProjectID = dataAO1.ProjectID

	m.ReplicationDriverData = dataAO1.ReplicationDriverData

	m.ReplicationID = dataAO1.ReplicationID

	m.Size = dataAO1.Size

	m.SnapshotFromCloud = dataAO1.SnapshotFromCloud

	m.SnapshotID = dataAO1.SnapshotID

	m.Status = dataAO1.Status

	m.UserID = dataAO1.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VolumeSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		GroupID string `json:"groupId,omitempty"`

		Metadata map[string]string `json:"metadata,omitempty"`

		Name *string `json:"name"`

		PoolID *string `json:"poolId"`

		ProfileID *string `json:"profileId"`

		ProjectID string `json:"projectId"`

		ReplicationDriverData map[string]string `json:"replicationDriverData,omitempty"`

		ReplicationID string `json:"replicationId,omitempty"`

		Size *int64 `json:"size"`

		SnapshotFromCloud bool `json:"snapshotFromCloud,omitempty"`

		SnapshotID string `json:"snapshotId,omitempty"`

		Status string `json:"status,omitempty"`

		UserID string `json:"userId,omitempty"`
	}

	dataAO1.AvailabilityZone = m.AvailabilityZone

	dataAO1.Description = m.Description

	dataAO1.GroupID = m.GroupID

	dataAO1.Metadata = m.Metadata

	dataAO1.Name = m.Name

	dataAO1.PoolID = m.PoolID

	dataAO1.ProfileID = m.ProfileID

	dataAO1.ProjectID = m.ProjectID

	dataAO1.ReplicationDriverData = m.ReplicationDriverData

	dataAO1.ReplicationID = m.ReplicationID

	dataAO1.Size = m.Size

	dataAO1.SnapshotFromCloud = m.SnapshotFromCloud

	dataAO1.SnapshotID = m.SnapshotID

	dataAO1.Status = m.Status

	dataAO1.UserID = m.UserID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this volume spec
func (m *VolumeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeSpec) validateAvailabilityZone(formats strfmt.Registry) error {

	if err := validate.Required("availabilityZone", "body", m.AvailabilityZone); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSpec) validatePoolID(formats strfmt.Registry) error {

	if err := validate.Required("poolId", "body", m.PoolID); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSpec) validateProfileID(formats strfmt.Registry) error {

	if err := validate.Required("profileId", "body", m.ProfileID); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSpec) validateProjectID(formats strfmt.Registry) error {

	if err := validate.RequiredString("projectId", "body", string(m.ProjectID)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSpec) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeSpec) UnmarshalBinary(b []byte) error {
	var res VolumeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
