// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationPropertiesSpec ReplicationPropertiesSpec represents some suggested properties for performing replication policies.
// swagger:model ReplicationPropertiesSpec
type ReplicationPropertiesSpec struct {

	// data protection
	DataProtection *DataProtectionLoS `json:"dataProtection,omitempty"`

	// replica infos
	ReplicaInfos *ReplicationPropertiesSpecReplicaInfos `json:"replicaInfos,omitempty"`
}

// Validate validates this replication properties spec
func (m *ReplicationPropertiesSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaInfos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationPropertiesSpec) validateDataProtection(formats strfmt.Registry) error {

	if swag.IsZero(m.DataProtection) { // not required
		return nil
	}

	if m.DataProtection != nil {
		if err := m.DataProtection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtection")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPropertiesSpec) validateReplicaInfos(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicaInfos) { // not required
		return nil
	}

	if m.ReplicaInfos != nil {
		if err := m.ReplicaInfos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicaInfos")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationPropertiesSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationPropertiesSpec) UnmarshalBinary(b []byte) error {
	var res ReplicationPropertiesSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReplicationPropertiesSpecReplicaInfos replication properties spec replica infos
// swagger:model ReplicationPropertiesSpecReplicaInfos
type ReplicationPropertiesSpecReplicaInfos struct {

	// consistency enalbed
	ConsistencyEnalbed bool `json:"consistencyEnalbed,omitempty"`

	// replcation bandwidth
	ReplcationBandwidth int64 `json:"replcationBandwidth,omitempty"`

	// replica update mode
	// Enum: [Active Adaptive Asynchronous Synchronous]
	ReplicaUpdateMode string `json:"replicaUpdateMode,omitempty"`

	// replication period
	ReplicationPeriod string `json:"replicationPeriod,omitempty"`
}

// Validate validates this replication properties spec replica infos
func (m *ReplicationPropertiesSpecReplicaInfos) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicaUpdateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replicationPropertiesSpecReplicaInfosTypeReplicaUpdateModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Adaptive","Asynchronous","Synchronous"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationPropertiesSpecReplicaInfosTypeReplicaUpdateModePropEnum = append(replicationPropertiesSpecReplicaInfosTypeReplicaUpdateModePropEnum, v)
	}
}

const (

	// ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeActive captures enum value "Active"
	ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeActive string = "Active"

	// ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeAdaptive captures enum value "Adaptive"
	ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeAdaptive string = "Adaptive"

	// ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeAsynchronous captures enum value "Asynchronous"
	ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeAsynchronous string = "Asynchronous"

	// ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeSynchronous captures enum value "Synchronous"
	ReplicationPropertiesSpecReplicaInfosReplicaUpdateModeSynchronous string = "Synchronous"
)

// prop value enum
func (m *ReplicationPropertiesSpecReplicaInfos) validateReplicaUpdateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replicationPropertiesSpecReplicaInfosTypeReplicaUpdateModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationPropertiesSpecReplicaInfos) validateReplicaUpdateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicaUpdateMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicaUpdateModeEnum("replicaInfos"+"."+"replicaUpdateMode", "body", m.ReplicaUpdateMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationPropertiesSpecReplicaInfos) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationPropertiesSpecReplicaInfos) UnmarshalBinary(b []byte) error {
	var res ReplicationPropertiesSpecReplicaInfos
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
