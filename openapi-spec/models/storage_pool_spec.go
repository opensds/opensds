// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePoolSpec A pool is discoveried and updated by a dock service. Each pool can be regarded as a physical storage pool or a virtual storage pool. It is a logical and atomic pool and can be abstracted from any storage platform.
// swagger:model StoragePoolSpec
type StoragePoolSpec struct {
	BaseModel

	// availability zone
	// Required: true
	AvailabilityZone *string `json:"availabilityZone"`

	// description
	Description string `json:"description,omitempty"`

	// dock Id
	// Required: true
	DockID *string `json:"dockId"`

	// extras
	Extras *StoragePoolExtraSpec `json:"extras,omitempty"`

	// free capacity
	// Required: true
	FreeCapacity *int64 `json:"freeCapacity"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Required: true
	// Enum: [available unavailable]
	Status *string `json:"status"`

	// storage type
	// Enum: [block file object]
	StorageType string `json:"storageType,omitempty"`

	// total capacity
	// Required: true
	TotalCapacity *int64 `json:"totalCapacity"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePoolSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		DockID *string `json:"dockId"`

		Extras *StoragePoolExtraSpec `json:"extras,omitempty"`

		FreeCapacity *int64 `json:"freeCapacity"`

		Name *string `json:"name"`

		Status *string `json:"status"`

		StorageType string `json:"storageType,omitempty"`

		TotalCapacity *int64 `json:"totalCapacity"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AvailabilityZone = dataAO1.AvailabilityZone

	m.Description = dataAO1.Description

	m.DockID = dataAO1.DockID

	m.Extras = dataAO1.Extras

	m.FreeCapacity = dataAO1.FreeCapacity

	m.Name = dataAO1.Name

	m.Status = dataAO1.Status

	m.StorageType = dataAO1.StorageType

	m.TotalCapacity = dataAO1.TotalCapacity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePoolSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AvailabilityZone *string `json:"availabilityZone"`

		Description string `json:"description,omitempty"`

		DockID *string `json:"dockId"`

		Extras *StoragePoolExtraSpec `json:"extras,omitempty"`

		FreeCapacity *int64 `json:"freeCapacity"`

		Name *string `json:"name"`

		Status *string `json:"status"`

		StorageType string `json:"storageType,omitempty"`

		TotalCapacity *int64 `json:"totalCapacity"`
	}

	dataAO1.AvailabilityZone = m.AvailabilityZone

	dataAO1.Description = m.Description

	dataAO1.DockID = m.DockID

	dataAO1.Extras = m.Extras

	dataAO1.FreeCapacity = m.FreeCapacity

	dataAO1.Name = m.Name

	dataAO1.Status = m.Status

	dataAO1.StorageType = m.StorageType

	dataAO1.TotalCapacity = m.TotalCapacity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pool spec
func (m *StoragePoolSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtras(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCapacity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolSpec) validateAvailabilityZone(formats strfmt.Registry) error {

	if err := validate.Required("availabilityZone", "body", m.AvailabilityZone); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolSpec) validateDockID(formats strfmt.Registry) error {

	if err := validate.Required("dockId", "body", m.DockID); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolSpec) validateExtras(formats strfmt.Registry) error {

	if swag.IsZero(m.Extras) { // not required
		return nil
	}

	if m.Extras != nil {
		if err := m.Extras.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extras")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePoolSpec) validateFreeCapacity(formats strfmt.Registry) error {

	if err := validate.Required("freeCapacity", "body", m.FreeCapacity); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var storagePoolSpecTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","unavailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePoolSpecTypeStatusPropEnum = append(storagePoolSpecTypeStatusPropEnum, v)
	}
}

// property enum
func (m *StoragePoolSpec) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagePoolSpecTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragePoolSpec) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var storagePoolSpecTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","file","object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePoolSpecTypeStorageTypePropEnum = append(storagePoolSpecTypeStorageTypePropEnum, v)
	}
}

// property enum
func (m *StoragePoolSpec) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagePoolSpecTypeStorageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragePoolSpec) validateStorageType(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTypeEnum("storageType", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolSpec) validateTotalCapacity(formats strfmt.Registry) error {

	if err := validate.Required("totalCapacity", "body", m.TotalCapacity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePoolSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePoolSpec) UnmarshalBinary(b []byte) error {
	var res StoragePoolSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
