// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileSpec An OpenSDS profile is identified by a unique name and ID. With adding extra properties, each profile can contains a set of tags of storage capabilities which are desirable features for a class of applications.
// swagger:model ProfileSpec
type ProfileSpec struct {
	BaseModel

	// custom properties
	CustomProperties CustomPropertiesSpec `json:"customProperties,omitempty"`

	// data protection properties
	DataProtectionProperties *DataProtectionPropertiesSpec `json:"dataProtectionProperties,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// name
	// Required: true
	Name *string `json:"name"`

	// provisioning properties
	ProvisioningProperties *ProvisioningPropertiesSpec `json:"provisioningProperties,omitempty"`

	// replication properties
	ReplicationProperties *ReplicationPropertiesSpec `json:"replicationProperties,omitempty"`

	// snapshot properties
	SnapshotProperties *SnapshotPropertiesSpec `json:"snapshotProperties,omitempty"`

	// storage type
	// Enum: [block file object]
	StorageType string `json:"storageType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProfileSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		CustomProperties CustomPropertiesSpec `json:"customProperties,omitempty"`

		DataProtectionProperties *DataProtectionPropertiesSpec `json:"dataProtectionProperties,omitempty"`

		Description *string `json:"description"`

		Name *string `json:"name"`

		ProvisioningProperties *ProvisioningPropertiesSpec `json:"provisioningProperties,omitempty"`

		ReplicationProperties *ReplicationPropertiesSpec `json:"replicationProperties,omitempty"`

		SnapshotProperties *SnapshotPropertiesSpec `json:"snapshotProperties,omitempty"`

		StorageType string `json:"storageType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CustomProperties = dataAO1.CustomProperties

	m.DataProtectionProperties = dataAO1.DataProtectionProperties

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.ProvisioningProperties = dataAO1.ProvisioningProperties

	m.ReplicationProperties = dataAO1.ReplicationProperties

	m.SnapshotProperties = dataAO1.SnapshotProperties

	m.StorageType = dataAO1.StorageType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProfileSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CustomProperties CustomPropertiesSpec `json:"customProperties,omitempty"`

		DataProtectionProperties *DataProtectionPropertiesSpec `json:"dataProtectionProperties,omitempty"`

		Description *string `json:"description"`

		Name *string `json:"name"`

		ProvisioningProperties *ProvisioningPropertiesSpec `json:"provisioningProperties,omitempty"`

		ReplicationProperties *ReplicationPropertiesSpec `json:"replicationProperties,omitempty"`

		SnapshotProperties *SnapshotPropertiesSpec `json:"snapshotProperties,omitempty"`

		StorageType string `json:"storageType,omitempty"`
	}

	dataAO1.CustomProperties = m.CustomProperties

	dataAO1.DataProtectionProperties = m.DataProtectionProperties

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.ProvisioningProperties = m.ProvisioningProperties

	dataAO1.ReplicationProperties = m.ReplicationProperties

	dataAO1.SnapshotProperties = m.SnapshotProperties

	dataAO1.StorageType = m.StorageType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this profile spec
func (m *ProfileSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataProtectionProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileSpec) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	if err := m.CustomProperties.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customProperties")
		}
		return err
	}

	return nil
}

func (m *ProfileSpec) validateDataProtectionProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DataProtectionProperties) { // not required
		return nil
	}

	if m.DataProtectionProperties != nil {
		if err := m.DataProtectionProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtectionProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileSpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ProfileSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProfileSpec) validateProvisioningProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningProperties) { // not required
		return nil
	}

	if m.ProvisioningProperties != nil {
		if err := m.ProvisioningProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisioningProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileSpec) validateReplicationProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationProperties) { // not required
		return nil
	}

	if m.ReplicationProperties != nil {
		if err := m.ReplicationProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileSpec) validateSnapshotProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotProperties) { // not required
		return nil
	}

	if m.SnapshotProperties != nil {
		if err := m.SnapshotProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotProperties")
			}
			return err
		}
	}

	return nil
}

var profileSpecTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","file","object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileSpecTypeStorageTypePropEnum = append(profileSpecTypeStorageTypePropEnum, v)
	}
}

// property enum
func (m *ProfileSpec) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileSpecTypeStorageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileSpec) validateStorageType(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTypeEnum("storageType", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileSpec) UnmarshalBinary(b []byte) error {
	var res ProfileSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
