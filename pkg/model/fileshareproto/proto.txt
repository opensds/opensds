// This source file has been modified by Huawei Technologies Co., Ltd.
// Copyright (c) 2019 Huawei Technologies Co., Ltd. All Rights Reserved.
//
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package fileshareproto;


service Controller {

    // Create a file share
    rpc CreateFileShare (CreateFileShareOpts) returns (GenericResponse){}

    // Delete a file share
    rpc DeleteFileShare (DeleteFileShareOpts) returns (GenericResponse){}

    // Extend a file share
    rpc ExtendFileShare (ExtendFileShareOpts) returns (GenericResponse){}

}

service FProvisionDock {

    // Create a file share
    rpc CreateFileShare (CreateFileShareOpts) returns (GenericResponse){}

    // Delete a file share
    rpc DeleteFileShare (DeleteFileShareOpts) returns (GenericResponse){}

    // Extend a file share
    rpc ExtendFileShare (ExtendFileShareOpts) returns (GenericResponse){}

}

// CreateFileShareOpts is a structure which indicates all required properties for creating a file share.
message CreateFileShareOpts {
    // The uuid of the file share, optional when creating.
    string id = 1;
    // The name of the file share, required.
    string name = 2;
    // The requested capacity of the file share, required.
    int64 size = 3;
    // The description of the file share, optional.
    string description = 4;
    // The locality that file share belongs to, required.
    string availabilityZone = 6;
    // The service level that file share belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which file share will be created, required.
    string poolId = 8;
    // The name of the pool on which file share will be created, required.
    string poolName = 9;
    // The metadata of the file share, optional.
    map<string, string> metadata = 10;
    // The storage driver type.
    string driverName = 11;
    // The Context
    string context = 12;
}

// DeleteFileShareOpts is a structure which indicates all required properties
// for deleting a fileshare.
message DeleteFileshareOpts {
    // The uuid of the fileshare, required.
    string id = 1;
    // The service level that fileshare belongs to, required.
    string profileId = 2;
    // The uuid of the pool on which fileshare will be created, required.
    string poolId = 3;
    // The metadata of the fileshare, optional.
    map<string, string> metadata = 4;
    // The storage driver type.
    string driverName = 5;
    // The Context
    string context = 6;
}

// ExtendFileShareOpts is a structure which indicates all required properties
// for Extending a fileshare.
message ExtendFileShareOpts {
    // The uuid of the fileshare, optional when creating.
    string id = 1;
    // The name of the fileshare, required.
    string name = 2;
    // The requested capacity of the fileshare, required.
    int64 size = 3;
    // The description of the fileshare, optional.
    string description = 4;
    // The locality that fileshare belongs to, required.
    string availabilityZone = 6;
    // The service level that fileshare belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which fileshare will be created, required.
    string poolId = 8;
    // The name of the pool on which fileshare will be created, required.
    string poolName = 9;
    // The metadata of the fileshare, optional.
    map<string, string> metadata = 10;
    // The storage driver type.
    string driverName = 11;
\    // The Context
    string context = 12;
}


message HostInfo {
    // The platform of the host, such as "x86_64"
    string platform = 1;
    // The type of OS, such as "linux","windows", etc.
    string osType = 2;
    // The name of the host
     string host = 3;
    // The ip address of the host
    string ip = 4;
    // The initiator infomation, such as: "iqn.2017.com.redhat:e08039b48d5c"
    string initiator = 5;
}

message FileShareData {
    map<string, string> data = 1;
}

// Generic response, it return:
// 1. Return result with message when create/update resource successfully.
// 2. Return result without message when delete resource successfully.
// 3. Return Error with error code and message when operate unsuccessfully.
message GenericResponse {
    message Result {
        string message = 1;
    }

    message Error {
        string code = 1;
        string description = 2;
    }

    oneof reply {
        Result result = 1;
        Error error = 2;
    }
}
